{"version":3,"sources":["components/common/Loader.js","components/common/Container.js","components/common/MovieList.js","components/common/MovieItem.js","components/common/MovieContent.js","components/Movie/index.js","styles/global.js","pages/Home.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Loader","styled","h2","Container","section","MovieList","div","MovieItem","MovieContent","Movie","props","title","summary","poster","year","genres","src","alt","map","genre","key","slice","GlobalStyle","createGlobalStyle","reset","Home","useState","moviesState","setMoviesState","isLoading","setIsLoading","getMovies","a","axios","get","movies","data","useEffect","movie","id","medium_cover_image","Header","header","NavContainer","Nav","nav","Navigation","to","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8cAEO,IAAMA,EAASC,UAAOC,GAAV,K,sICAZ,IAAMC,EAAYF,UAAOG,QAAV,K,iNCAf,IAAMC,EAAYJ,UAAOK,IAAV,K,soBCAf,IAAMC,EAAYN,UAAOK,IAAV,K,weCAf,IAAME,EAAeP,UAAOK,IAAV,KC8BVG,EA5BD,SAAAC,GAAU,IACfC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,QAASC,EAAwBH,EAAxBG,OAAQC,EAAgBJ,EAAhBI,KAAMC,EAAUL,EAAVK,OACrC,OACE,kBAACR,EAAD,KACE,yBAAKS,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,kBAACH,EAAD,KACE,4BAAKG,GACL,4BAAKG,GACL,4BACGC,EAAOG,KAAI,SAACC,GAAD,OACV,wBAAIC,IAAKD,GAAQA,OAGrB,2BAAIP,EAAQS,MAAM,EAAG,KAArB,U,qcCbD,IAAMC,EAAcC,4BAAH,IACpBC,KC6CWC,MAzCf,WAAiB,IAAD,EACwBC,mBAAS,IADjC,mBACPC,EADO,KACMC,EADN,OAEoBF,oBAAS,GAF7B,mBAEPG,EAFO,KAEIC,EAFJ,KAIRC,EAAS,uCAAG,8BAAAC,EAAA,sEAC6BC,IAAMC,IAAN,UAPhC,4CAOgC,oBAD7B,gBACQC,EADR,EACRC,KAAQA,KAAQD,OAExBP,EAAeO,GACfL,GAAa,GAJG,2CAAH,qDAWf,OAJAO,qBAAU,WACRN,MACC,IAGD,kBAAC5B,EAAD,KACE,kBAACmB,EAAD,MAECO,EAAY,kBAAC7B,EAAD,mBACT,kBAACK,EAAD,KACAsB,EAAYT,KACV,SAAAoB,GAAK,OACH,kBAAC,EAAD,CACElB,IAAKkB,EAAMC,GACXA,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZH,MAAO2B,EAAM3B,MACbC,QAAS0B,EAAM1B,QACfC,OAAQyB,EAAME,mBACdzB,OAAQuB,EAAMvB,e,m2BCnC9B,IAAM0B,EAASxC,UAAOyC,OAAV,KAKNC,EAAe1C,UAAOK,IAAV,KAkBZsC,EAAM3C,UAAO4C,IAAV,KAyCMC,EAfI,WACjB,OACE,kBAACL,EAAD,KACE,kBAACE,EAAD,KACE,yCACA,kBAACC,EAAD,KACE,4BACE,4BAAI,kBAAC,IAAD,CAAMG,GAAG,KAAT,cC3CDC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,OCCrB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1e3bba5d.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Loader = styled.h2`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 21px;\n`\n","import styled from 'styled-components'\n\nexport const Container = styled.section`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n`\n","import styled from 'styled-components'\n\nexport const MovieList = styled.div`\n  width: 90%;\n  display: flex;\n  padding-top: 70px;\n  justify-content: space-between;\n  align-items: flex-start;\n  flex-wrap: wrap;\n`\n","import styled from 'styled-components'\n\nexport const MovieItem = styled.div`\n  width: 48%;\n  padding: 20px;\n  background-color: #fff;\n  margin-bottom: 70px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  border-radius: 8px;\n  box-shadow: 0 13px 27px -5px rgba(50, 50, 93, 0.25),\n    0 8px 16px -8px rgba(0, 0, 0, 0.3),\n    0 -6px 16px -6px rgba(0, 0, 0, 0.025);\n\n  img {\n    max-width: 170px;\n    width: 100%;\n    position: relative;\n    top: -50px;\n    box-shadow: 0 13px 27px -5px rgba(50, 50, 93, 0.25),\n    0 8px 16px -8px rgba(0, 0, 0, 0.3),\n    0 -6px 16px -6px rgba(0, 0, 0, 0.025);\n  }\n\n\n`\n","import styled from 'styled-components'\n\nexport const MovieContent = styled.div`\n  margin-left: 30px;\n  width: 100%;\n\n  h2, h3 {\n    font-weight: bold;\n    color: #333335;\n    margin-bottom: 10px;\n\n  }\n\n  h3 {\n    opacity: 0.4;\n    margin-bottom: 5px;\n  }\n\n  ul {\n    display: flex;\n    flex-wrap: wrap;\n    font-size: 14px;\n    margin-bottom: 18px;\n    color: #b2b3bc;\n  }\n\n  ul li + li {\n    margin-left: 5px;\n\n  }\n\n  p {\n    color: #333335;\n    opacity: 0.9;\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MovieItem, MovieContent } from '../common';\n\nconst Movie = props => {\n  const {title, summary, poster, year, genres} = props\n  return (\n    <MovieItem>\n      <img src={poster} alt={title} title={title} />\n      <MovieContent>\n        <h2>{title}</h2>\n        <h3>{year}</h3>\n        <ul>\n          {genres.map((genre) => (\n            <li key={genre}>{genre}</li>\n          ))}\n        </ul>\n        <p>{summary.slice(0, 140)}...</p>\n      </MovieContent>\n    </MovieItem>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  year: PropTypes.number.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Movie\n","import {createGlobalStyle} from 'styled-components'\nimport reset from 'styled-reset'\n\n\nexport const GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n  html,\n  body,\n  #root {\n    height: 100%;\n  }\n\n  body {\n    font-family: sans-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    background-color: #eff3f7;\n  }\n\n\n`\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport Movie from '../components/Movie';\nimport { GlobalStyle } from '../styles/global';\nimport { Loader } from '../components/common/Loader';\nimport { MovieList, Container } from '../components/common';\n\nconst BASE_URL = \"https://yts-proxy.now.sh/list_movies.json\";\n\nfunction Home() {\n  const [moviesState, setMoviesState] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  const getMovies = async () => {\n    const { data: { data: { movies } } } = await axios.get(`${BASE_URL}?sort_by=rating`);\n\n    setMoviesState(movies)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    getMovies()\n  }, [])\n\n  return (\n    <Container>\n      <GlobalStyle />\n\n      {isLoading ? <Loader>Loading...</Loader>\n        : <MovieList>{\n          moviesState.map(\n            movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres} />))\n        }</MovieList>\n\n\n      }\n\n\n    </Container>\n  );\n}\n\nexport default Home;\n","import React from 'react'\nimport styled from 'styled-components'\nimport {Link } from 'react-router-dom'\n\nconst Header = styled.header`\n  background-color: #fa163f;\n  padding:30px 0;\n`\n\nconst NavContainer = styled.div`\n  width: 90%;\n  max-width:1400px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 18px;\n\n  h1 {\n    font-size: 21px;\n    text-transform: uppercase;\n    font-weight: bold;\n    letter-spacing: 0.25rem;\n    color: #fff;\n  }\n`\n\nconst Nav = styled.nav`\n\n  ul{\n    display: flex;\n    list-style: none;\n\n  }\n\n  li + li {\n    margin-left: 20px;\n  }\n\n  a {\n    text-decoration: none;\n    text-transform: uppercase;\n    font-weight: 300;\n    cursor: pointer;\n    color: #fff;\n\n    &:hover {\n      color: #16FAD1;\n      font-weight: 400;\n    }\n  }\n`\n\nconst Navigation = () => {\n  return (\n    <Header>\n      <NavContainer>\n        <h1>Movie-App</h1>\n        <Nav>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n          </ul>\n        </Nav>\n      </NavContainer>\n    </Header>\n  )\n}\n\nexport default Navigation\n","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Home from './pages/Home';\nimport Navigation from './components/Navigation';\n\nfunction App() {\n  return(\n    <BrowserRouter>\n      <Navigation />\n      <Switch>\n\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}